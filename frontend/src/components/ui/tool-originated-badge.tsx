import React from 'react';
import { Badge } from '@/components/ui/badge';
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';
import { Bot, Zap, Sparkles, Settings } from 'lucide-react';
import { ToolOriginatedBadge } from '@/types';

interface ToolOriginatedBadgeProps {
  isToolOriginated?: boolean;
  toolMetadata?: {
    initiated_by_tool: boolean;
    tool_session_id?: string;
    original_request?: string;
    created_at?: string;
  };
  className?: string;
  size?: 'sm' | 'md' | 'lg';
}

export const ToolOriginatedBadgeComponent: React.FC<ToolOriginatedBadgeProps> = ({
  isToolOriginated = false,
  toolMetadata,
  className = '',
  size = 'sm'
}) => {
  if (!isToolOriginated && !toolMetadata?.initiated_by_tool) {
    return null;
  }

  const getBadgeConfig = (): ToolOriginatedBadge => {
    if (toolMetadata?.original_request) {
      return {
        type: 'ai_generated',
        label: 'AI Generated',
        color: 'purple',
        icon: 'sparkles',
        tooltip: `Generated by AI: ${toolMetadata.original_request.substring(0, 100)}${toolMetadata.original_request.length > 100 ? '...' : ''}`
      };
    } else if (toolMetadata?.tool_session_id) {
      return {
        type: 'automated',
        label: 'Automated',
        color: 'orange',
        icon: 'settings',
        tooltip: `Automated message from tool session: ${toolMetadata.tool_session_id}`
      };
    } else {
      return {
        type: 'tool_initiated',
        label: 'Tool Initiated',
        color: 'blue',
        icon: 'bot',
        tooltip: 'This message was initiated through ConnectorPro'
      };
    }
  };

  const badgeConfig = getBadgeConfig();

  const getIcon = () => {
    switch (badgeConfig.icon) {
      case 'sparkles':
        return <Sparkles className="w-3 h-3 mr-1" />;
      case 'settings':
        return <Settings className="w-3 h-3 mr-1" />;
      case 'zap':
        return <Zap className="w-3 h-3 mr-1" />;
      case 'bot':
      default:
        return <Bot className="w-3 h-3 mr-1" />;
    }
  };

  const getColorClasses = () => {
    switch (badgeConfig.color) {
      case 'purple':
        return 'bg-purple-100 text-purple-800 border-purple-200 hover:bg-purple-200';
      case 'orange':
        return 'bg-orange-100 text-orange-800 border-orange-200 hover:bg-orange-200';
      case 'green':
        return 'bg-green-100 text-green-800 border-green-200 hover:bg-green-200';
      case 'blue':
      default:
        return 'bg-blue-100 text-blue-800 border-blue-200 hover:bg-blue-200';
    }
  };

  const getSizeClasses = () => {
    switch (size) {
      case 'lg':
        return 'text-sm px-3 py-1';
      case 'md':
        return 'text-xs px-2 py-1';
      case 'sm':
      default:
        return 'text-xs px-2 py-0.5';
    }
  };

  const badge = (
    <Badge 
      variant="outline" 
      className={`
        ${getColorClasses()} 
        ${getSizeClasses()} 
        ${className}
        transition-colors duration-200 
        border 
        font-medium 
        inline-flex 
        items-center
      `}
    >
      {getIcon()}
      {badgeConfig.label}
    </Badge>
  );

  if (badgeConfig.tooltip) {
    return (
      <TooltipProvider>
        <Tooltip>
          <TooltipTrigger asChild>
            {badge}
          </TooltipTrigger>
          <TooltipContent>
            <p className="max-w-xs text-sm">{badgeConfig.tooltip}</p>
          </TooltipContent>
        </Tooltip>
      </TooltipProvider>
    );
  }

  return badge;
};

// Export a simpler version for quick use
export const ToolBadge: React.FC<{ isToolOriginated: boolean; className?: string }> = ({ 
  isToolOriginated, 
  className 
}) => {
  return (
    <ToolOriginatedBadgeComponent 
      isToolOriginated={isToolOriginated}
      className={className}
    />
  );
};

export default ToolOriginatedBadgeComponent;